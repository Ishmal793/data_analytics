# -*- coding: utf-8 -*-
"""functions,modules,numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZv2OK7HeKEiBDmulmbX5SyHD4NWNlDM

# functions
"""

# set of code ,which once created, they can be used throughout the program
# --> help to break our program into smaller parts
# --> help to look more organized and manageable

def hello():
  print("hello me !")
hello()

def add():
  x=12
  y=234
  print(x+y)
add()

# parameters
# --> are the variables written inside the parentheses with the name of function
# arguments
# --> values passed to the parameters while call the function

def add(x,y):# parameters
  print(x+y)
add(11,24)# arguments

def rect(lenght,width):
  print("the area of rectangle is :",lenght*width)
rect(2,3)

# arbitory arguments
def hello(*name):
  print("hello , my name is ",name[1])

hello('lisa','jon')

# return and recursion
# return --> exit a function

def hello ():
  return ("hello me !")
print(hello())

# recursion --> function can call itself

def hello():
  print("hello")
  return(hello())
print(hello())

# factorial
def fac(n):
  if n==1:
    return 1
  else:
    return n*fac(n-1)
print(fac(5))

"""# lambda"""

# --> requied short period of time
# --> take numerous arguments
# --> have one experssion

a=lambda x,y:x+y
print(a(1,2))

a=lambda b:b*4
print(a(4))

x=lambda a,b,c:(a+b)*c
print(x(2,6,4))

# local variables
# --> restricted to only one block or code
# --> cannot be changed throughout the program
# global variables
# --> not restricted to one block of code
# --> can be changed throughout the program

x=23
print(x)
def hello():
  x=25
  return x
print(hello())
print(x)

x=23
print(x)
def hello():
  global x
  x=25
  return x
print(hello())
print(x)

"""# **problems**

**write a program to find max of three number in python**
"""

def max(val1,val2,val3):
  if val1>val2 and val1>val3:
    return val1
  elif val2>val1 and val2>val3:
    return val2
  else:
    return val3
print(max(1,7,3))

"""**write a python function to create and print a list where the values are square of number between 1 to 30**"""

def create_list():
  list=[]
  for i in range(1,31):
    list.append(i**2)
  return list
print(create_list())

"""**write a python function that takes a number as a parameter and check if the number is prime or not**"""

def check_prime(num):
  if num==1:
    return False
  for i in range(2,num):
    if num%i==0:
      return False
  return True
print(check_prime(2))

"""**write a python function to sum all the numbers in a list**"""

def add (num):
  sum=0
  for i in num:
    sum+=i
  return sum
print(add([1,2,3,4,5]))
# using recursion
def add(num):
  if len(num)==0:
    return 0
  else:
    return num[0]+add(num[1:])
print(add([1,2,3,4,5]))

"""**write a python program to solve the fibonacci sequence using recursion**"""

def fibonacci(num):
  if num==1:
    return 0
  elif num==2:
    return 1
  else:
    return fibonacci(num-1)+fibonacci(num-2)
print(fibonacci(7))

"""# modules"""

# modules  are the .py files
# 200 to above modules in python we have

# --> in bulit modules

# date time
import datetime
x =datetime.datetime.now()
print(x)
y=datetime.datetime(2022,12,31)
print(y.strftime("%A"))
print(y.strftime("%a"))
print(y.strftime("%m"))
print(y.strftime("%y"))

# random
import random
print(random.randint(1,10)) # random integer
print(random.random()) # random float
l=["head","tail"]
print(random.choice(l)) # random choice
random.shuffle(l) # shuffle
print(l)

#  math
import math
x=max(23,45,62,12)
print(x)
y=min(23,45,62,12)
print(y)
z=abs(-23) # absulute convert - to positive
print(z)
a=pow(2,3)
print(a)
b=math.sqrt(25)
print(b)
c=math.ceil(2.3)
print(c)
d=math.floor(2.3)
print(d)

"""# numpy"""

# numpy short form of Numerical python
# defnes a multi-dimention arry

import numpy as  np

l1 =[20,30,40,50]
l2=[30,40,50,60,70]
l3=5
print(l1+l2)
print(l1*l3)

a=np.array([20,30,40])
b=np.array([40,50,60])
print(a)
print(b)
print(a+b)
print(a*b)

a=np.array([30,40,"39"])
print(a)

l1=np.array([[1,2,3],[4,5,6]])
print(l1)

arra=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
print(arra)

arr=np.array([20,30,40])
print(arr[1])
print(arr[:3])

arr=np.array([[20,30,40],[50,60,70]])
print(arr[:2,:3])
print(arr[0,1:]) # 0 array
print(arr[1,1:]) # 1 array
print( )

arr=np.array([[20,30,40],[50,60,70],[20,30,40]])
print(arr[2,1:])
print(np.shape(arr)) # rows and coloum
print(len(arr)) # no of nested value
print(np.size(arr)) # total number of element in an array
print(np.ndim(arr)) #
print(arr.dtype)
print(arr.itemsize)
# a.astype(int) --> convert on array to a different data type
print(arr.astype(float))

"""**mathematical operations and functions**"""

arr=np.array([10,20,30,40,50])
arr1=np.array([60,70,80,90,10])
print(np.add(arr,arr1))
print(np.subtract(arr,arr1))
print(np.multiply(arr,arr1))
print(np.divide(arr,arr1))
print(np.mod(arr,arr1))

arr=np.array([[10,20],[40,50]])
arr1=np.array([[60,70],[90,10]])
print(np.add(arr,arr1))
print(np.subtract(arr,arr1))
print(np.multiply(arr,arr1))
print(np.divide(arr,arr1))
print(np.mod(arr,arr1))

# power
arr1=np.array([20,30,40,])
arr2=np.array([2])
print(np.power(arr1,arr2))

arr1=np.array([400,900,1600])
print(np.sqrt(arr1))
print(arr.dtype)

"""**Combinig and split array**"""

# concatination
arr1=np.array([10,20,30,40])
arr2=np.array([50,60,70,80,90])
print(np.concatenate((arr1,arr2)))

arr1=np.array([[10,20,30],[40,50,60]])
arr2=np.array([[60,70,80],[90,10,20]])
print(np.concatenate((arr1,arr2),axis=1))
print(np.concatenate((arr1,arr2),axis=0))

print(np.hstack((arr1,arr2))) # hotizontal concatenation

print(np.vstack((arr1,arr2))) # vertical concatenation

# split
arr=np.array([10,20,30,40,50,60])
print(np.array_split(arr,5))

"""**addition and emove in array**"""

# np.append
# if data in 2d convert it in 1d and append it
a=np.array([10,20,30])
b=np.array([40,50,60])
print(np.append(a,[23,45,56]))
print(np.append(a,b))

print(np.insert(a,2,23))

a=np.array([[10,20,30],[40,50,60]])
print(np.insert(a,(2,3),[30,50],axis=1))
print(np.insert(a,1,[50],axis=0))

print(np.insert(a,(2,3),[30,50],axis=1))
print(np.insert(a,[1,2],[50],axis=0))
print(np.insert(a,[1,2],[50],axis=1))

a=np.array([[10,20,30],[40,50,60]])
print(np.delete(a,1,axis=0))
print(np.delete(a,1,axis=1))

# short
ar=np.array([[2,3,4,1,23,5],[2,7,5,34,56,2]])
print(np.sort(ar))

# filter

arr=np.array([20,30,40,50])
# fa=[True,False,True,False]
# print(arr[fa]) # gives only true value
# fa=arr>35
fa=arr%2==0
print(arr[fa])

# search
ar=np.array([2,3,4,1,23,5])
print(np.where(ar==2))
print(np.where(ar%2==0))
ar=np.array([3,4,5,2,1])
print(np.searchsorted(ar,3))

"""**aggregating function**"""

a=np.array([20,30,40,50])
print(np.sum(a))
print(np.min(a))
print(np.max(a))
print(np.size(a)) # give us count
print(np.mean(a))
print(np.median(a))
print(np.std(a))
print(np.var(a))
print(np.cumsum(a))
print(np.cumprod(a))

a=[100,150,199,200,250,130]
b=[10,50,30,40,30,10]
price=np.array(a)
quantity=np.array(b)
print(price,"\n",quantity)
c=np.cumprod([price,quantity], axis=0)
print(c[1].sum())

# statistical functions
baked_food=[200,250,150,190,200,280]
a=np.array(baked_food)
print(np.mean(baked_food))
print(np.median(baked_food)) # central value after sorting

# mostly occire values use statistic lab
import statistics as stats
print(stats.mode(baked_food)) # re occuring value
print(np.std(baked_food))
print(np.var(baked_food)) #squre of std

# -1  represent inversely proporational relationship
# +1  represent proporational relationship
#  = mean no relationship
tobacoo_consumtion=[30,50,10,30,50,40]
deaths=[100,120,70,100,120,112]
print(np.corrcoef(tobacoo_consumtion,deaths))

price=[300,100,350,150,200]
sales=[10,20,7,17,3]
print(np.corrcoef(price,sales))